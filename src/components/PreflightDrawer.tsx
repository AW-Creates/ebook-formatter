import React from 'react';\n\ninterface PreflightDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  text: string;\n  selectedTemplate: string;\n}\n\ninterface PreflightIssue {\n  id: string;\n  title: string;\n  description: string;\n  severity: 'warning' | 'error' | 'info';\n  affectedCount?: number;\n  pages?: string;\n  fixable: boolean;\n}\n\nconst PreflightDrawer: React.FC<PreflightDrawerProps> = ({\n  isOpen,\n  onClose,\n  text,\n  selectedTemplate\n}) => {\n  if (!isOpen) return null;\n\n  // Analyze text for common issues\n  const analyzeText = (): PreflightIssue[] => {\n    const issues: PreflightIssue[] = [];\n    const lines = text.split('\\n');\n    const words = text.split(/\\s+/).filter(w => w.length > 0);\n    \n    // Check for widows/orphans (simplified check)\n    const shortLines = lines.filter(line => line.trim().length > 0 && line.trim().length < 20);\n    if (shortLines.length > 5) {\n      issues.push({\n        id: 'widows-orphans',\n        title: 'Widows/Orphans',\n        description: `${shortLines.length} potentially problematic short lines detected`,\n        severity: 'warning',\n        affectedCount: shortLines.length,\n        fixable: true\n      });\n    }\n\n    // Check for hyphenation density\n    const hyphenatedWords = words.filter(word => word.includes('-'));\n    if (hyphenatedWords.length / words.length > 0.05) {\n      issues.push({\n        id: 'hyphenation',\n        title: 'Hyphenation Density',\n        description: `High hyphenation density detected (${(hyphenatedWords.length / words.length * 100).toFixed(1)}%)`,\n        severity: 'warning',\n        affectedCount: hyphenatedWords.length,\n        fixable: true\n      });\n    }\n\n    // Check for inconsistent quotation marks\n    const straightQuotes = (text.match(/\"/g) || []).length;\n    const curlyQuotes = (text.match(/[""]/g) || []).length;\n    if (straightQuotes > 0 && curlyQuotes > 0) {\n      issues.push({\n        id: 'quotes',\n        title: 'Mixed Quote Styles',\n        description: `Document contains both straight (${straightQuotes}) and curly (${curlyQuotes}) quotes`,\n        severity: 'warning',\n        fixable: true\n      });\n    }\n\n    // Check for long paragraphs\n    const longParagraphs = lines.filter(line => line.trim().length > 500);\n    if (longParagraphs.length > 0) {\n      issues.push({\n        id: 'long-paragraphs',\n        title: 'Long Paragraphs',\n        description: `${longParagraphs.length} paragraphs may be too long for optimal reading`,\n        severity: 'info',\n        affectedCount: longParagraphs.length,\n        fixable: false\n      });\n    }\n\n    // Check for missing chapter breaks\n    const chapterPattern = /^chapter\\s+\\d+/i;\n    const chapters = lines.filter(line => chapterPattern.test(line.trim()));\n    if (chapters.length === 0 && text.length > 5000) {\n      issues.push({\n        id: 'no-chapters',\n        title: 'No Chapter Structure',\n        description: 'Long document without clear chapter divisions may benefit from structure',\n        severity: 'info',\n        fixable: false\n      });\n    }\n\n    // Template-specific checks\n    if (selectedTemplate === 'classic' && text.includes('—')) {\n      issues.push({\n        id: 'em-dashes',\n        title: 'Em Dash Usage',\n        description: 'Classic template detected with em dashes - verify spacing consistency',\n        severity: 'info',\n        fixable: true\n      });\n    }\n\n    return issues;\n  };\n\n  const issues = analyzeText();\n  const errorCount = issues.filter(i => i.severity === 'error').length;\n  const warningCount = issues.filter(i => i.severity === 'warning').length;\n  const infoCount = issues.filter(i => i.severity === 'info').length;\n\n  const handleFix = (issueId: string) => {\n    // In a real implementation, this would apply fixes\n    alert(`Fix applied for ${issueId}! In production, this would automatically resolve the issue.`);\n  };\n\n  const handleExplain = (issueId: string) => {\n    const explanations: Record<string, string> = {\n      'widows-orphans': 'Widows are single lines at the end of a paragraph that appear at the top of a page. Orphans are single lines at the beginning of a paragraph that appear at the bottom of a page. Both can disrupt reading flow.',\n      'hyphenation': 'Too many hyphenated words in close proximity can make text harder to read. Consider rewording or adjusting line breaks.',\n      'quotes': 'Mixing straight quotes (\") with curly quotes ("") creates inconsistent typography. Choose one style throughout.',\n      'long-paragraphs': 'Paragraphs longer than 5-7 sentences may be difficult to read. Consider breaking them into smaller chunks.',\n      'no-chapters': 'Long documents benefit from clear structural divisions to help readers navigate and take breaks.',\n      'em-dashes': 'Em dashes (—) should typically have no spaces around them, while en dashes (–) are used for ranges and may have spaces.'\n    };\n    \n    alert(explanations[issueId] || 'No explanation available for this issue.');\n  };\n\n  return (\n    <aside \n      className=\"fixed right-0 top-[112px] bottom-0 w-full sm:w-[380px] z-50 bg-[#1E1E1E] border-l border-gray-700 shadow-2xl p-5 overflow-y-auto\" \n      aria-label=\"Preflight\"\n    >\n      <div className=\"flex items-center justify-between mb-4\">\n        <div>\n          <h4 className=\"font-semibold text-amber-300\">Preflight</h4>\n          <div className=\"flex items-center gap-4 text-xs mt-1\">\n            {errorCount > 0 && <span className=\"text-red-400\">{errorCount} errors</span>}\n            {warningCount > 0 && <span className=\"text-amber-400\">{warningCount} warnings</span>}\n            {infoCount > 0 && <span className=\"text-blue-400\">{infoCount} info</span>}\n            {issues.length === 0 && <span className=\"text-green-400\">All checks passed</span>}\n          </div>\n        </div>\n        <button \n          onClick={onClose}\n          className=\"text-xs px-2 py-1 rounded-lg border border-gray-700 text-gray-300 hover:border-cyan-400 hover:text-cyan-300 transition\"\n        >\n          Close\n        </button>\n      </div>\n      \n      <p className=\"text-xs text-gray-500 mb-4\">\n        We scan content for common print issues and suggest quick fixes.\n      </p>\n\n      {text.trim() === '' ? (\n        <div className=\"text-center py-8 text-gray-500\">\n          <svg className=\"mx-auto h-12 w-12 mb-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          <p className=\"text-sm\">Upload content to run preflight checks</p>\n        </div>\n      ) : issues.length === 0 ? (\n        <div className=\"text-center py-8 text-green-400\">\n          <svg className=\"mx-auto h-12 w-12 mb-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n          </svg>\n          <p className=\"text-sm font-medium\">All checks passed!</p>\n          <p className=\"text-xs text-gray-500 mt-1\">Your document looks good for printing</p>\n        </div>\n      ) : (\n        <ul className=\"space-y-3 text-sm\">\n          {issues.map((issue) => (\n            <li key={issue.id} className=\"bg-[#232323] border border-gray-700 rounded-lg p-3\">\n              <div className=\"flex items-start justify-between gap-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <div className={`w-2 h-2 rounded-full ${\n                      issue.severity === 'error' ? 'bg-red-500' :\n                      issue.severity === 'warning' ? 'bg-amber-500' :\n                      'bg-blue-500'\n                    }`} />\n                    <div className=\"font-medium text-gray-200\">{issue.title}</div>\n                  </div>\n                  <div className=\"text-xs text-gray-400 mb-2\">\n                    {issue.description}\n                  </div>\n                  {issue.affectedCount && (\n                    <div className=\"text-[10px] text-gray-500\">\n                      {issue.affectedCount} instances found\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex gap-1\">\n                  {issue.fixable && (\n                    <button \n                      onClick={() => handleFix(issue.id)}\n                      className=\"px-2 py-1 rounded-md border border-gray-700 text-xs text-gray-300 hover:border-cyan-400 hover:text-cyan-300 transition\"\n                    >\n                      Fix\n                    </button>\n                  )}\n                  <button \n                    onClick={() => handleExplain(issue.id)}\n                    className=\"px-2 py-1 rounded-md border border-gray-700 text-xs text-gray-300 hover:border-cyan-400 hover:text-cyan-300 transition\"\n                  >\n                    ?\n                  </button>\n                </div>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {issues.length > 0 && (\n        <div className=\"mt-6 p-3 bg-[#232323] border border-gray-700 rounded-lg\">\n          <h5 className=\"text-sm font-medium text-gray-200 mb-2\">Quick Actions</h5>\n          <div className=\"flex flex-wrap gap-2\">\n            <button className=\"px-3 py-1.5 rounded-lg text-xs border border-gray-700 text-gray-300 hover:border-cyan-400 hover:text-cyan-300 transition\">\n              Fix All Widows/Orphans\n            </button>\n            <button className=\"px-3 py-1.5 rounded-lg text-xs border border-gray-700 text-gray-300 hover:border-cyan-400 hover:text-cyan-300 transition\">\n              Standardize Quotes\n            </button>\n            <button className=\"px-3 py-1.5 rounded-lg text-xs border border-gray-700 text-gray-300 hover:border-cyan-400 hover:text-cyan-300 transition\">\n              Check Hyphenation\n            </button>\n          </div>\n        </div>\n      )}\n    </aside>\n  );\n};\n\nexport default PreflightDrawer;